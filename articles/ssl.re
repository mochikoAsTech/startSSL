= SSL/TLSについて学ぼう

この章ではSSL/TLSについて学びます。

//pagebreak

== 「サイトをHTTPS化する」とは何か？

そもそもですが「サイトをHTTPS化する」とは、なんでしょう？

サイトのHTTPS化とは、サイト全体を「https://」から始まるURLにすることで、「常時SSL化」や「常時SSL/TLS化」あるいは「AOSSL（Always On SSLの略）」などとも呼ばれています。

今までは問い合わせページや会員登録など、個人情報を入力したり表示したりする画面のみHTTPSで暗号化してやり取りしていましたが、これをウェブサイト全体に適用しましょう、というのがサイトのHTTPS化です。

=== 個人情報をやりとりしないサイトでもHTTPSにしなきゃだめ？

でも個人情報をやり取りするわけでもない、普通のページまで、なぜHTTPS化しなければいけないのでしょう？ 

サイトをHTTPS化するメリットには、

- 検索順位が上がる
- サイトの表示が速くなる
- アクセス解析の精度があがる

などがよく挙げられます。確かに上記のようなメリットはありますが、これまではやらないと何かまずいことが起こる、というわけではありませんでした。そのため、今まで先送りにしてきたサイト担当者の方も多いのではないでしょうか。では、この先もサイトをHTTPS化しなくても大丈夫なのでしょうか？答えはNOです！このままHTTPS化しないでいると、どんなデメリットが起きるのか？を具体的に解説していきましょう。

=== HTTP化しないと起きる「わるいこと」

==== サイトが「安全でない」と表示されてしまう

GoogleはHTTPからHTTPSへの移行を強く推し進めています。その施策の1つとして、Googleが提供するブラウザの「Chrome」では、2018年7月にリリースされた「Chrome バージョン68」から、HTTPSでないページに対して「保護されていない通信」という表示をするようになりました。

ページを開いた際に、ページのURLが「https://」で始まるものでなければ、次のようにURLの左側に「保護されていない通信」という表示（@<img>{startSSL_83}）がされます。

//image[startSSL_83][HTTPのサイトを開くと「保護されていない通信」と表示される][scale=0.6]{
//}

エンドユーザがサイトを開いたときに、URLの真横に「保護されていない通信」と表示されたら、さすがに「何か問題があるのかな、見ない方がいいのかも…？」と心配になってしまいますよね。

Chromeだけでなく、同様にFirefoxも錠前に赤い斜め線が入ったマークの表示（@<img>{startSSL_84}）を行っており、サイトをHTTPS化しないことで、エンドユーザにサイトが「安全でない」と判断されてしまう状況にあります。

//image[startSSL_84][HTTPのサイトを開くと「保護されていない通信」と表示される][scale=0.6]{
//}

==== Wi-Fiスポットでセッションハイジャックされる恐れがある

皆さんがSNSなどのサイトを開くと、まだログインしていないのに、ログイン済みのページが表示されることがありますよね？これは過去にログインした際に、サイトからクッキーで渡された「セッションID」（一時的な通行証のようなもの）を、次に開いたときにも提示することで、ログイン済みのユーザーとして扱われるからです。

ログインページだけがHTTPSのサイトで、それ以外のページをHTTPで開いたとき、クッキーにSecure属性が付いていないと、この「セッションID」は暗号化されない状態で送信されてしまいます。では、誰でも使えるWi-Fiスポットに、スマホやタブレットを繋いだ状態で、HTTPのページを開いて「セッションID」が送られたらどうなるでしょう？

なんと同じWi-Fiにつないでいる悪意の第三者によって、暗号化されていない「セッションID」を盗まれ、なりすましでサイトにログインされる恐れがあるのです。これが「セッションハイジャック」と呼ばれる攻撃です。

こうしたことが発生しないように、サイト全体をHTTPSにして、常にクッキーの「セッションID」を暗号化しておかないと危ないですよ、ということです。またログインなどが一切ない、完全に静的コンテンツのみのサイトであっても、Wi-Fiスポットで見知らぬ誰かに「あの人はどんなページを見ているのかな？」とデータを窃視されるリスクはあります。サイトとの通信がHTTPSで暗号化されていれば、情報を盗み見られるエンドユーザにとってのリスクを防ぐことができます。

==== 周りがHTTPSになると、ますますリファラーが取れなくなる

こちらはGoogleアナリティクスなどを使って、サイト流入元の情報を確認されている方にとって、重要と思われるデメリットです。

自社のサイトがHTTPだと、HTTPSのサイトからリンクを踏んで飛んできた場合に、リファラ（利用者が直前に訪問していたサイトの情報）を取得することができません。実際にGoogleアナリティクスを開いて、集客の「参照元/メディア」を確認してみてください。アクセス元が「（direct）/（none）」と表示されて、どこから飛んできたのか分からないものがありませんか？　その中には、ブラウザのブックマークや、メール内のリンクから飛んできた、本当に「直前に訪問していたサイトがないもの」だけでなく、HTTPSのサイトから飛んできたアクセスも含まれています。

今後、周囲のサイトのHTTPS化が進んで、自社サイトだけがHTTPで取り残されると、この「リファラーが取得できる割合」はますます下がっていくことになります。ですが、自社のサイトをHTTPSにすれば、HTTPのサイトから飛んできた場合も、HTTPSのサイトから飛んできた場合も、リファラーを取得することができるようになります。

==== 検索順位が下がる

Googleは2014年の時点で既に、HTTPSに対応しているウェブサイトを検索ランキングで優遇する方針を発表しています。

=== HTTPS化すると起きる「いいこと」

==== 表示速度が上がる

==== Same Site問題に対応できる

==== すべてのサイトが暗号化されれば「暗号化されている情報は重要な情報」というアタリが付けられなくなる

流れていくデータの殆どが平文な中で、たまに暗号化されたデータが流れてくると「暗号化されてるってことは、あれは大事な情報だな！」とアタリを付けることができます。

ですが、すべてのサイトがHTTPSになって、流れてくるデータがすべて暗号化されていれば、どれが重要な重要なデータなのかアタリが付けられなくなります。

大事なものも大事でないものもすべて同じ頑丈なアタッシュケースにしまって運ぶことで、泥棒がどのアタッシュケースを狙えばいいのか分からなくする。木は森に隠せ、という戦法ですね。

== SSL/TLSとは？

SSL（Secure Socket Layer）/TLS（Transport Layer Security）とは、インターネット上で安全にデータを送受信するための約束事（プロトコル@<fn>{protcol}）です。

//footnote[protcol][例えば手紙は「メッセージを書いた便せんを封筒に入れて、表に宛先、裏に差出人を書き、重さに応じた切手を貼ってポストに入れる」という取り決めに従えば、きちんと相手に届きます。手紙の例と同じように、インターネットで通信を行う際、どんなデータをどんな方法で送受信するのか、という手順の約束事のことをプロトコルと呼びます。SSLもTLSもプロトコルですし、HTTPやHTTPS、DNSもSMTPもプロトコルです]

SSLもTLSもあくまでプロトコル、つまり通信するための「約束事」なので、実際に通信するときは、そのプロトコルに従って実装されたソフトウェアを使います。SSL/TLSでは、OpenSSLというオープンソースのソフトウェアを使うことが殆ど@<fn>{opensslCommand}です。

//footnote[opensslCommand][さっき証明書を取得するときに打ったコマンドも、opensslコマンドでしたね]

=== SSLとTLSはどういう関係？

SSLとTLSは別々の名前ですが、その役割に大きな違いはありません。「SSL3.0」からバージョンアップする際に、「SSL3.1」ではなく「TLS1.0」という新しい名前が付けられました。つまり「TLSはSSLの後継バージョン」ということです。

ちなみに名前がまだSSLだったときの最後のバージョン「SSL3.0」は、重大な脆弱性@<fn>{zeizyakusei}が見つかり、2015年のRFC 7568@<fn>{rfc7568}でもう使わないよう「Do Not Use SSL Version 3.0」と示されています。

//footnote[zeizyakusei][脆弱性（ぜいじゃくせい）というのは悪用が可能なバグや設定不備のことです]
//footnote[rfc7568][Deprecating Secure Sockets Layer Version 3.0 @<href>{https://tools.ietf.org/html/rfc7568}]

ですがSSLという言葉の認知度が高く、TLSと呼んでもピンとこない人の方が多いため、現状は分かりやすさと正確さを両立するためにSSL/TLSと併記されることが多いです。

本著ではSSL/TLSのことを指して、SSLという言葉を使用します。

=== SSLイコールHTTPSではない

サイト全体を「https://」から始まるURLにすることを、「常時SSL化」のように呼ぶため、皆さんの中にはSSL＝HTTPSだと思っている人もいるかも知れません。

HTTPとSSLを組み合わせて使うことで、通信を保護するプロトコルがHTTPSです。ですが、SSLはHTTPSにおいてのみ使われるプロトコルではありません。例えばサーバにファイルをアップするときのFTPと組み合わせて使うFTPS（FTP over SSL）や、メール送信のSMTPと組み合わせて使うSMTPS（SMTP over SSL）など、HTTPS以外にもSSLを使う場面はいろいろあります。

繰り返しになりますが、SSLはインターネット上で安全にデータを送受信するためのプロトコルです。上位のアプリケーション層@<fn>{osi}がHTTPであれ、FTPであれ、SSLと組み合わせて使うことでデータを安全に送受信できるようになるのです。

//footnote[osi][OSI参照モデルのアプリケーション層のこと。大学の授業や新卒研修で、誰しも一度は「アプセトネデブ」という語呂合わせを聞いたことがあるのでは…]

== SSL証明書とは

=== SSLサーバ証明書とSSLクライアント証明書

「SSL証明書」という名前を聞いたことはありますか？名前だけは知っているという人も、実際に仕事で使ったことがあるという人もいると思います。

SSL証明書には、SSLサーバ証明書とSSLクライアント証明書の2種類（@<img>{sslClientCert}）があります。ざっくり言うとサーバの身元を証明するのがSSLサーバ証明書で、クライアントの身元を証明するのがSSLクライアント証明書です。

//image[sslClientCert][SSLサーバ証明書とSSLクライアント証明書][scale=0.8]{
//}

単に「SSL証明書」という略称で呼んだときは、「SSLサーバ証明書」のことを指すことが殆どです。本著でもSSLサーバ証明書のことを指して、SSL証明書という言葉を使用します。

=== SSL証明書はどんな場面で使われている？

SSL証明書はどんな場面で使われているのでしょうか？

SSL証明書は、あなたがブラウザで「https://」から始まるURLのサイトを開いて、次のようなマーク（@<img>{startSSL_81}、@<img>{startSSL_82}）が表示されているときに使われています。

//image[startSSL_81][ChromeでHTTPSのサイトを開いたとき][scale=0.6]{
//}

//image[startSSL_82][FirefoxでHTTPSのサイトを開いたとき][scale=0.6]{
//}

逆に「http://」から始まるURLのサイトを開いて、次のようなマーク（@<img>{startSSL_80}、@<img>{startSSL_79}）が表示されているときは使われていません。

//image[startSSL_80][ChromeでHTTPのサイトを開いたとき][scale=0.6]{
//}

//image[startSSL_79][FirefoxでHTTPのサイトを開いたとき][scale=0.6]{
//}

== SSL証明書は全然違う2種類の仕事をしている

「SSL証明書はhttpsから始まるページで使われている」ということが分かったところで、次に、httpsから始まるページでは、SSL証明書は一体何をしているのでしょうか。実は、SSL証明書は全然異なる次の2つの仕事をしています。この点がSSL証明書の話の分かりにくさの原因なのです。

 * Webサイトで送受信する情報を暗号化すること
 * Webサイト運営者の身元を証明すること

それでは1つ目の役割、「⁠Webサイトで送受信する情報を暗号化すること」をから、詳しく説明していきます。

=== Webサイトで送受信する情報を暗号化すること

=== Webサイト運営者の身元を証明すること

== 鍵マークが壊れるケース
=== すべてHTTPで通信しているとき
=== HTTPSだけど一部がHTTPSじゃないとき
==== 画像とCSSの指定が絶対パスだった
== ウェブページが表示されるまで
=== 1往復で表示されるわけじゃない
== SSL証明書は何を証明してくれるのか？
=== ネットバンクの事例
== 認証局事業者の身元は誰が証明する？
=== 身元保証の連鎖をつなぐ中間CA証明書とルート証明書
== SSL証明書はどうしてあんなに値段に差があるの？
== 同じ「SSL証明書」という名前でも3つの種類がある
=== EV証明書
==== さよならグリーンバー
=== OV証明書
=== DV証明書
=== 3つの違いは何か？
=== ブラウザベンダーによるEV証明書の扱いの変化
== その他の証明書
=== 中間証明書
=== クロスルート証明書
== どの証明書を買えばいい？
=== ワイルドカード証明書
=== wwwありにリダイレクトしたいだけなのにwwwなしの証明書もいるの？
=== コモンネームが*.example.comの証明書はexample.comで使える？
==== SANs
=== Let'sEncrypt
== CDNと証明書
=== CDNを使ったら古い端末でサイトが見られなくなった
=== 同じサーバで複数サイトをHTTPS化したら古い端末で別サイトが表示された
=== SNI Server Name Indication

HTTPSで使われるTLSプロトコルでは、接続したいホスト名をクライアント側からサーバに伝えるためにSNI（Server Name Indication）のTLS拡張が必要となります。
ただしSNIは、1つのIPアドレスを複数のバーチャルホストで共用するため、HTTPSで使用した場合、SNI非対応のクライアントではデフォルトのホストが応答します。
2019年現在、SNI非対応端末を「対象端末」としているサービスはあまり多くないかもしれません。

= SSL/TLSについて学ぼう

この章ではSSL/TLSについて学びます。

//pagebreak

== 「サイトをHTTPS化する」とは何か？

そもそもですが「サイトをHTTPS化する」とは、なんでしょう？

サイトのHTTPS化とは、サイト全体を「https://」から始まるURLにすることで、「常時SSL化」や「常時SSL/TLS化」あるいは「AOSSL（Always On SSLの略）」などとも呼ばれています。

数年前まではお問い合わせや会員登録など、個人情報を入力したり表示したりする一部のページのみHTTPSにしているサイトが多かったですが、これをウェブサイト全体に適用しましょう、というのがサイトのHTTPS化です。

=== 個人情報をやりとりしないサイトでもHTTPSにしなきゃだめ？

でも企業がやっているネットショップならまだしも、個人情報をやり取りするわけでもない、ただ日記を公開しているだけといった個人のサイトもHTTPS化しなければいけないのでしょうか？サイトをHTTPS化するメリットには、

- 検索順位が上がる
- サイトの表示が速くなる
- アクセス解析の精度があがる

などがよく挙げられます。確かに上記のようなメリットはありますが、2014年より前は「やらないと何かまずいことが起こる」というわけではありませんでした。

そのため「やらなけければ…」と思いつつ、先送りにしてきたケースも多いと思います。ですが2020年時点では、HTTPS化しないでいるとさまざまなデメリットが発生します。どんなデメリットが起きるのか、具体的に解説していきましょう。

== HTTPS化しないと起きる「わるいこと」

=== サイトが「安全でない」と表示されてしまう

GoogleはHTTPからHTTPSへの移行を強く推進しています。その施策の1つとして、Googleが提供するブラウザの「Chrome」では、2018年7月にリリースされた「Chrome バージョン68」から、HTTPSでないページに対して「保護されていない通信」という表示をするようになりました。

Chromeでサイトを開いて、URLが「http://」で始まるものだった場合、次のようにURLの左側に「保護されていない通信」と表示（@<img>{startSSL_83}）されます。

//image[startSSL_83][いきなり！ステーキのサイトを開くと「保護されていない通信」と表示される][scale=0.6]{
//}

サイトを開いたときに、URLの真横に「保護されていない通信」と表示されたら、「何か危なそう…見ない方がいいのかも…？」と心配になってしまいますね。Chromeだけでなく、同様にFirefoxも錠前に赤い斜め線が入ったマークの表示（@<img>{startSSL_84}）を行っており、サイトをHTTPS化しないことで、エンドユーザにサイトが「安全でない」と思われてしまう状況にあります。

//image[startSSL_84][HTTPのサイトを開くと「保護されていない通信」と表示される][scale=0.6]{
//}

=== Wi-Fiスポットでセッションハイジャックされる恐れがある

Amazonなどのサイトを開くと、まだログインしていないのに、ログイン済みのページが表示されることがありますよね？これは過去にログインした際に、サイトからCookieで渡された「セッションID」（一時的な通行証のようなもの）を、次に開いたときにも提示することで、ログイン済みのユーザーとして扱われているからです。

ログインページだけがHTTPSのサイトだと、それ以外のページをHTTPで開いたとき、CookieにSecure属性が付いていないと、この「セッションID」は暗号化されない状態で送信されてしまいます。では、誰でも使えるWi-Fiスポットに、スマホやタブレットを繋いだ状態で、HTTPのページを開いて「セッションID」が送られたらどうなるでしょう？

なんと同じWi-Fiにつないでいる悪意の第三者によって、暗号化されていない「セッションID」を盗まれ、なりすましでサイトにログインされる恐れがあります。これが「セッションハイジャック」と呼ばれる攻撃です。

こうした攻撃で不正にログインされないよう、サイト全体をHTTPSにして、常にCookieの「セッションID」を暗号化しておかないと危険です。またログインなどが一切ない、完全に静的コンテンツのみのサイトであっても、Wi-Fiスポットで見知らぬ誰かに「あの人はどんなサイトを見ているのかな？」とデータを窃視されるリスクもあります。例えば「妊活情報のブログを長時間読んでいた」「特定の病気について調べていた」など、どんなサイトを見ていたのか？という情報の中にも、人に知られたくないことはたくさんあります。サイトとの通信がHTTPSで暗号化されていれば、情報を盗み見られるエンドユーザにとってのリスクを防ぐことができます。

=== 周囲がHTTPS化することで起きる「わるいこと」

さらに、インターネット全体でHTTPS化が進むことによって、HTTPのままでいるサイトに起きるデメリットもあります。

==== 周りがHTTPSになると、ますますリファラーが取れなくなる

こちらはGoogleアナリティクスなどを使って、サイト流入元の情報を確認している方にとって、重要と思われるデメリットです。

たとえば自社のサイトがHTTPだと、HTTPSのサイトからリンクを踏んで飛んできた場合に、リファラ（利用者が直前に訪問していたサイトの情報）を取得することができません。実際にGoogleアナリティクスを開いて、集客の「参照元/メディア」を確認してみてください。アクセス元が「（direct）/（none）」と表示されて、どこから飛んできたのか分からないものがありませんか？その中には、ブラウザのブックマークや、メール内のリンクから飛んできた、本当に「直前に訪問していたサイトが存在しないもの」だけでなく、HTTPSのサイトから飛んできたアクセスも含まれています。

今後、周囲のサイトのHTTPS化が進んで、自社のサイトだけがHTTPで取り残されると、この「リファラーが取得できる割合」はますます下がっていくことになります。自社のサイトをHTTPSにすれば、HTTPのサイトから飛んできた場合も、HTTPSのサイトから飛んできた場合も、リファラーを取得することができるようになります。

=== 相対的に検索順位が下がる

Googleは「HTTPS everywhere」、つまり「（お問い合わせや会員登録といった一部のページに限らず）どこでもHTTPS！」を提唱しています。2014年8月の時点で既に、HTTPSに対応しているウェブサイトを検索ランキングで優遇する方針も発表@<fn>{rankingSignal}しています。

//footnote[rankingSignal][Google ウェブマスター向け公式ブログ \[JA\]: HTTPS をランキング シグナルに使用します @<href>{https://webmaster-ja.googleblog.com/2014/08/https-as-ranking-signal.html}]

Googleのランキングアルゴリズムで、「サイトがHTTPS化されているか」が指標のひとつとなっています。もちろんたくさんある指標の中のひとつで、他の指標ほどウェイトは大きくない、とされていますが、競合サイトのHTTPS化が進めば相対的に検索順位が下がる可能性があります。

== HTTPS化すると起きる「いいこと」

=== 表示速度が上がる

かつては、HTTPSにすると、暗号化と復号のオーバーヘッドのためウェブサイトが遅くなるというのが常識でした。しかし、サーバー側、クライアント側ともにCPUの性能が向上したことで、2020年現在、もはやオーバーヘッドは重要視するほどではなくなっています。@<fn>{sslAccelerator}

//footnote[sslAccelerator][サーバの手前に設置して、暗号化や復号だけを行なう専用機器の「SSLアクセラレータ」を使う環境の話も、最近はほぼ聞かなくなりました]

それだけでなく、HTTPSにすることでHTTP/2というプロトコルを利用できるようになり、むしろ表示の速度が速くなるケースもあります。

=== Same Site問題に対応できる

Chromeは2020年2月にリリースされるChrome 80以降、クロスサイトのCookieは「SameSite=None; Secure」の設定がなければ、アクセスしたサイトのCookieとして保存・利用できなくなります。Secure属性を追加するには、HTTPSでの接続が必須です。

@<href>{https://developers-jp.googleblog.com/2019/11/cookie-samesitenone-secure.html}

=== 「暗号化されている情報は重要な情報」というアタリが付けられなくなる

流れていくデータの殆どが平文な中で、たまに暗号化されたデータが流れてくると、データを眺めていた悪意の第三者は「暗号化されてるってことは、あれは大事な情報だな！」とアタリを付けることができます。

ですが、すべてのサイトがHTTPSになって、流れてくるデータがすべて暗号化されていれば、どれが重要な重要なデータなのかアタリが付けられなくなります。大事なものも大事でないものもすべて同じ頑丈なアタッシュケースにしまって運べば、泥棒はどのアタッシュケースを狙えばいいのか分からなくなります。木は森に隠せ、という戦法ですね。

== SSL/TLSとは？

HTTPS化するメリット、しないデメリットが分かったところで、改めて「SSL/TLSってなに？」というところを学んで行きましょう！

SSL（Secure Socket Layer）/TLS（Transport Layer Security）とは、インターネット上で安全にデータを送受信するための約束事（プロトコル@<fn>{protcol}）です。

//footnote[protcol][例えば手紙は「メッセージを書いた便せんを封筒に入れて、表に宛先、裏に差出人を書き、重さに応じた切手を貼ってポストに入れる」という取り決めに従えば、きちんと相手に届きます。手紙の例と同じように、インターネットで通信を行う際、どんなデータをどんな方法で送受信するのか、という手順の約束事のことをプロトコルと呼びます。SSLもTLSもプロトコルですし、HTTPやHTTPS、DNSもSMTPもプロトコルです]

SSLもTLSもあくまでプロトコル、つまり通信するための「約束事」なので、実際に通信するときは、そのプロトコルに従って実装されたソフトウェアを使います。SSL/TLSでは、OpenSSLというオープンソースのソフトウェアを使うことが殆ど@<fn>{opensslCommand}です。

//footnote[opensslCommand][さっき証明書を取得するときに打ったコマンドも、opensslコマンドでしたね]

=== SSLとTLSはどういう関係？

SSLとTLSは別々の名前ですが、その役割に大きな違いはありません。「SSL3.0」からバージョンアップする際に、「SSL3.1」ではなく「TLS1.0」という新しい名前が付けられました。つまり「TLSはSSLの後継バージョン」ということです。

ちなみに名前がまだSSLだったときの最後のバージョン「SSL3.0」は、重大な脆弱性@<fn>{zeizyakusei}が見つかり、2015年のRFC 7568@<fn>{rfc7568}でもう使わないよう「Do Not Use SSL Version 3.0」と示されています。

//footnote[zeizyakusei][脆弱性（ぜいじゃくせい）というのは悪用が可能なバグや設定不備のことです]
//footnote[rfc7568][Deprecating Secure Sockets Layer Version 3.0 @<href>{https://tools.ietf.org/html/rfc7568}]

ですがSSLという言葉の認知度が高く、TLSと呼んでもピンとこない人の方が多いため、現状は分かりやすさと正確さを両立するためにSSL/TLSと併記されることが多いです。

本著ではSSL/TLSのことを指して、SSLという言葉を使用します。

=== SSLイコールHTTPSではない

サイト全体を「https://」から始まるURLにすることを、「常時SSL化」のように呼ぶため、皆さんの中にはSSL＝HTTPSだと思っている人もいるかも知れません。

HTTPとSSLを組み合わせて使うことで、通信を保護するプロトコルがHTTPS（HTTP over SSL/TLS）です。ですが、SSLはHTTPSにおいてのみ使われるプロトコルではありません。例えばサーバにファイルをアップするときのFTPと組み合わせて使うFTPS（FTP over SSL）や、メール送信のSMTPと組み合わせて使うSMTPS（SMTP over SSL）など、HTTPS以外にもSSLが使われている場面はいろいろあります。

繰り返しになりますが、SSLはインターネット上で安全にデータを送受信するためのプロトコルです。上位のアプリケーション層@<fn>{osi}がHTTPであれ、FTPであれ、SSLと組み合わせて使うことでデータを安全に送受信できるようになるのです。

//footnote[osi][OSI参照モデルのアプリケーション層のこと。エンジニア諸氏は誰しも、大学の授業や新卒研修で一度は「アプセトネデブ」という語呂合わせを聞いたことがあるのでは…]

== SSL証明書とは

続いて、HTTPS化するため必要なSSL証明書について学んでいきましょう。

=== SSLサーバ証明書とSSLクライアント証明書

「SSL証明書」という名前を聞いたことはありますか？名前だけは知っているという人も、実際に仕事で使ったことがあるという人もいると思います。

SSL証明書には、SSLサーバ証明書とSSLクライアント証明書の2種類（@<img>{sslClientCert}）があります。ざっくり言うとサーバの身元を証明するのがSSLサーバ証明書で、クライアントの身元を証明するのがSSLクライアント証明書です。

//image[sslClientCert][SSLサーバ証明書とSSLクライアント証明書][scale=0.8]{
//}

単に「SSL証明書」という略称で呼んだときは、「SSLサーバ証明書」のことを指すことが殆どです。本著でもSSLサーバ証明書のことを指して、SSL証明書という言葉を使用します。

=== SSL証明書はどんな場面で使われている？

SSL証明書はどんな場面で使われているのでしょうか？

SSL証明書は、あなたがブラウザで「https://」から始まるURLのサイトを開いて、次のようなマーク（@<img>{startSSL_81}、@<img>{startSSL_82}）が表示されているときに使われています。

//image[startSSL_81][ChromeでHTTPSのサイトを開いたとき][scale=0.6]{
//}

//image[startSSL_82][FirefoxでHTTPSのサイトを開いたとき][scale=0.6]{
//}

逆に「http://」から始まるURLのサイトを開いて、次のようなマーク（@<img>{startSSL_80}、@<img>{startSSL_79}）が表示されているときは使われていません。

//image[startSSL_80][ChromeでHTTPのサイトを開いたとき][scale=0.6]{
//}

//image[startSSL_79][FirefoxでHTTPのサイトを開いたとき][scale=0.6]{
//}

== SSL証明書は全然違う2種類の仕事をしている

「SSL証明書は@<code>{https://}から始まるページで使われている」ということが分かったところで、次に、@<code>{https://}から始まるページにおいて、SSL証明書は一体何をしているのでしょうか。実は、SSL証明書は全然異なる次の2つの仕事をしています。この点がSSL証明書の話の分かりにくさの原因なのです。

 * Webサイトで送受信する情報を暗号化すること
 * Webサイト運営者の身元を証明すること

それでは1つ目の役割、「⁠Webサイトで送受信する情報を暗号化すること」をから、詳しく説明していきます。

=== Webサイトで送受信する情報を暗号化すること

皆さんがHTTPから始まるURLをブラウザで開いたとき、入力したURLの文字やサーバから届くWebページ、画像などは何も暗号化されていません。パソコンからサーバまでのリクエスト（往路）も、サーバからパソコンまでのレスポンス（復路）も、そのままの姿でだーっと流れていきます。

データが暗号化されないため、パソコンとサーバの間のネットワークを盗聴すれば、あなたが入力して送った文字や表示された画像は、誰でも盗み見ることができます。

もしこれがAmazonやTwitterにログインするときだったらどうでしょう？入力したIDやパスワードがそのままの姿で流れていったり、過去の購入履歴がAmazonのサーバから自分のパソコンまで流れてきたりして、途中誰でも盗み見られる状態だったら困りますよね。

そこで出てくるのがHTTPSです。HTTPSならネットワーク上を流れるデータが暗号化されます。分かりやすく言うと、ブラウザでHTTPSから始まるURLを開いたとき、自分のパソコンとサーバの間を流れるデータのすべてはSSL証明書によって暗号化されます。

これは送信も受信も両方ですので、ログインやファイルアップロードなどの送信のときも、購入履歴画面や会員情報確認画面など、自分の情報をサーバから受け取って表示する受信のときも、データはすべて暗号化されます。データが、中の見えない（透明ではない）安全なトンネルを通っていくようなものだと思ってください。

SSL証明書がないと、HTTPSから始まるURLでページを開くことはできません。これがSSL証明書の1つ目の役割、「⁠Webサイトで送受信する情報を暗号化すること」です。このような理由から昨今、エンドユーザに情報を送ったり、受け取ったりするサイトでは、SSL証明書は必須となっています。

== ウェブページは1往復で表示されるわけじゃない

1つのウェブページを表示するときの流れは、「トップページをください」「はい完成品をどうぞ」の一往復だけではありません。次のように、何往復ものリクエストとレスポンスの末にページが表示されます。

 * 「example.comさん、ページをください」「はい、HTMLどうぞ」
 * 「cdn.example.comさん、base.cssをください」「はい、base.cssどうぞ」
 * 「cdn.example.comさん、common.jsをください」「はい、common.jsどうぞ」
 * 「cdn.example.comさん、top.pngをください」「はい、top.pngどうぞ」
 * 「cdn.example.comさん、banner01.jpgをください」「はい、banner01.jpgどうぞ」

この1行1行がリクエストとレスポンスの往復を表しているのです。

==== 画像とCSSの指定が絶対パスだった

「HTTPSから始まるURLを開いたときに鍵マークではなくiマークが表示される」現象の原因も、この暗号化が関係しています。

ブラウザでHTTPSから始まるURLを開くと、Webページはサーバから自分のパソコンまで、HTTPSで暗号化されて届きます。しかし取得したページのHTMLに、<img src="http://www.example.com/images/top.png">のような、絶対パスで画像を指定する<img>タグが含まれていると、その画像ファイルは暗号化されていないHTTPで送られてきます。

つまり、せっかくWebページをHTTPSで開いても、そのWebページのHTMLソースの中で、CSSや画像ファイルの指定をhttp://から始まる形式にしていたり、YouTubeなどのコンテンツをhttp://から始まる形式で埋め込んでいると、ブラウザは鍵マークの代わりにiマークを表示して「ページの一部が暗号化されていないので、安全ではありません」と警告を出すのです。

iマークをクリックすると、「このサイトへの接続は完全には保護されていません」と表示されます。

//image[mixedContents][混在コンテンツ（mixed content）はエラーが出る][scale=0.6]{
//}

これを直すには、<img>タグを <img src="/images/top.png">のようにパスの部分だけにします。これならページをHTTPで開いたときは画像もHTTPで表示でき、HTTPSで開いたときは画像もHTTPSで表示できるため、鍵マークが壊れることはありません。

あるいは、「⁠画像はWebページとは別のサーバにあるので、ドメインから書かなければいけない」という場合は、<img>タグを<img src="//image.example.com/images/top.png"> のように書くことで、先ほどと同じように、ページをHTTPで開いたときは画像もHTTPで表示でき、HTTPSで開いたときは画像もHTTPSで表示できます。その結果、鍵マークは壊れません。

テンプレートファイルなどをHTTP/HTTPS両方のページで利用しているケースでは、後者の「//から始まる書き方」にしておくと、鍵マークが壊れる現象は避けることができてお勧めです。

=== Webサイト運営者の身元を証明すること

役割の話に戻って、2つ目の役割「Webサイト運営者の身元を証明すること」について詳しく説明します。

この役割を一言で説明するなら、SSL証明書は「Webサイト運営者の身元証明書」であるということです。このことを分かりやすく説明するために、架空の銀行を舞台にした、たとえ話をしてみます。

==== ネットバンクの事例

あなたは、立ち上げたばかりの株式会社EXAMPLE銀行の広報担当者です。EXAMPLE銀行の「bank.example.co.jp」というドメインを取得し、無事Webサイトを開設しました。EXAMPLE銀行は店舗を持たないネットバンクで、ブラウザでbank.example.co.jpを開き、IDとパスワードを入れてログインすると、残高の確認や振込、キャッシングなどをすることができます。

そこへ目をつけた詐欺師がいました。詐欺師は bank.example.jpというよく似たドメインを取得して、bank.example.co.jpにそっくりな偽サイトを作りました。Webサイトは基本的に「公開」されているものなので、丸ごとコピーしてパクリサイトを立ち上げることは意外と簡単です。そのため、サイトの見た目だけなら、bank.example.co.jp（本物サイト）とbank.example.jp（偽サイト）はそっくりで区別がつきません。

そして詐欺師はEXAMPLE銀行の利用者向けに、EXAMPLE銀行をよそおって次のメールを出しました。

「EXAMPLE銀行より緊急のご連絡です。お客様の口座で不審な取引が確認されました。今すぐに下記のリンクからログインして、お客様の口座残高をご確認ください。24時間以内に確認を行わなかった場合、お客様の口座は凍結されます」

メールを見た利用者が慌ててリンクを踏んで、bank.example.jp（偽サイト）を開いてしまい、そこでIDとパスワードを入力すると、詐欺師はIDとパスワードを盗むことができます。そしてその盗んだIDとパスワードで、詐欺師がbank.example.co.jp（本物サイト）にログインしたら、あとは簡単ですよね。限度額までキャッシングをして、すべて詐欺師の口座に振り込めば、大金が一瞬で詐欺師のものになるのです。

このように偽サイトへ誘導してIDやパスワードを盗む詐欺の手法を「フィッシング詐欺」と言います。自社のお客様がこんな目にあったら大変ですよね。誰もEXAMPLE銀行を使ってくれなくなってしまいます。急いで対策を立てて、フィッシング詐欺からお客様を守らなければなりません！

お客様からの問い合わせで事態を知ったEXAMPLE銀行広報担当のあなたは、慌ててbank.example.co.jp（本物）のトップページに「bank.example.jpはEXAMPLE銀行を騙った悪質な偽サイトです。ご注意ください」とお知らせを出しました。しかし、なんとbank.example.jp（偽物）のトップページにも「bank.example.co.jpはEXAMPLE銀行を騙った悪質な偽サイトです。ご注意ください」と書かれてしまいました。

トップページに注意書きを出したが効果なし

画像

もうEXAMPLE銀行の利用者は、どちらを信じていいのか、どちらが本物のEXAMPLE銀行のサイトだか分かりません。店舗があれば窓口で「EXAMPLE銀行のサイトはbank.example.co.jpです！」と書いたチラシを配ることもできますが、EXAMPLE銀行はネットバンクなので店舗がありません。ネットだけで「bank.example.co.jpこそがEXAMPLE銀行が運営する本物のサイトだ」と証明するには、一体どうしたらいいのでしょう？

ここで登場するのがSSL証明書です。


先ほど述べたとおり、SSL証明書は「Webサイト運営者の身元証明書」です。サイバートラストやシマンテック（シマンテックは少し前までベリサインというブランド名でした）といった「認証局事業者」に対して、EXAMPLE銀行広報担当のあなたが「bank.example.co.jpのSSL証明書を発行してください」と依頼すると、

株式会社EXAMPLE銀行という会社が実在するのか？
bank.example.co.jpというドメインの所有者は証明書の発行を承認しているのか？
証明書の発行依頼をしてきたのは株式会社EXAMPLE銀行なのか？
の3点をよくよく調査・確認した上で、「⁠bank.example.co.jpは株式会社EXAMPLE銀行が運営するサイトです」という身元証明書を発行してくれます。

この身元証明書こそが、みなさんご存知の「SSL証明書」なのです。

このSSL証明書をWebサイトに設置しておくと、エンドユーザがブラウザでサイトにアクセスしたとき、サイトのデータと一緒に、身元を証明するSSL証明書が送られてきます。本物のサイトには「認証局事業者が発行してくれた身元証明」があるため、HTTPSから始まるURLを開くとURLの左側に鍵のマークが表示されます。一方、詐欺師が認証局事業者に「オレ、EXAMPLE銀行。SSL証明書発行してよ」と言っても、EXAMPLE銀行ではないので、先ほどの3点が確認できません。よってSSL証明書は発行してもらえず、鍵マークが出ないどころか、HTTPSから始まるURLでサイトを開くことすらできません。

SSL証明書があればWebサイト運営者の身元証明ができる

画像

これで無事に「bank.example.co.jpこそがEXAMPLE銀行が運営する本物のサイトだ！」と証明することができました。ということで、繰り返しになりますが、SSL証明書は「Webサイト運営者の身元証明書」になるのです。

ちなみにこの「証明」とは、

株式会社EXAMPLE銀行という会社が実在すること
bank.example.co.jp というサイトの運営者が株式会社EXAMPLE銀行であること
を証明しているだけで、

株式会社EXAMPLE銀行が社会的に信頼に足る会社であること
株式会社EXAMPLE銀行が経営状態のよい優良企業であること
などは一切証明していません。身元証明といっても、いわゆる保証人のような身元保証ではないので、その点は間違えないよう注意してください。

さて、話を進めます。フィッシング詐欺に失敗した詐欺師は、「⁠失敗したか。でもWebサイトを丸ごとパクったみたいに、SSL証明書も盗んでくればいいや！」と思いました。

しかしWebサイトと違って、SSL証明書はそう簡単には盗めないようになっています。しかもなんとか頑張って盗んできたとしても、そのSSL証明書は「bank.example.co.jpに対する証明書」なので、「⁠bank.example.jp」のサイトに設置すると、ブラウザで次のようなエラーメッセージが表示されます。

bank.example.co.jp のSSL証明書を bank.example.jpで使うと出るエラーメッセージ

画像

つまり、SSL証明書は盗んでも意味がないのです。このようにSSL証明書という身元証明を使って、HTTPSでページを表示すれば、詐欺師が身元を騙ることは途端に難しくなります。

これがSSL証明書の2つ目の役割、「⁠Webサイト運営者の身元を証明すること」になります。

== 認証局事業者の身元は誰が証明する？

このたとえ話では、認証局事業者が「bank.example.co.jpは株式会社EXAMPLE銀行が運営するサイトです」というSSL証明書を発行してくれたので、EXAMPLE銀行のWebサイトは運営者の身元を証明できましたとさ。めでたしめでたし、ということになります。

でもちょっと待ってください。サイバートラストやシマンテックといった「認証局事業者」は本物なのでしょうか？

詐欺師AがEXAMPLE銀行になりすまし、協力する詐欺師Bが認証局事業者になりすまして、適当なSSL証明書を自作しただけかもしれません。疑えばきりがありませんが、全然知らないAさんに、全然知らないBさんの身元保証をしてもらっても、いまいち信用できないのと同じ話です。

そこで登場するのが「中間CA証明書」です（CAはCertificate Authorityの頭文字で、日本語に訳すと認証局事業者です⁠）⁠。

認証局事業者にお金を払ってSSL証明書を発行してもらうと、「⁠中間CA証明書」という証明書が一緒についてきます。SSL証明書はWebサイト運営者の身元証明書でしたが、中間CA証明書は認証局事業者の身元証明書なのです。

実はSSL証明書による「身元証明」は、「⁠最下層のSSL証明書＞中間CA証明書＞最上位のルート証明書」とピラミッドのように階層化されています。

SSL証明書？ 中間CA証明書？ ルート証明書？ ピラミッドのように階層化？ いろいろな名前が出てこんがらがってきました。実例を元に説明したほうが分かりやすいので、株式会社イグザンプルのコーポレートサイトを例にして、この身元証明の連鎖を見てみましょう。

=== 身元保証の連鎖をつなぐ中間CA証明書とルート証明書

株式会社イグザンプルのコーポレートサイトには、サイバートラストから発行されたSSL証明書と中間CA証明書が設置されています。

ここで、サイバートラストが提供している「SSL証明書の設定確認ツール」を使って、SSL証明書を見てみましょう。

サイバートラストの「SSL証明書の設定確認ツール」

画像

「SSL証明書の設定確認ツール」を開いたら、フォームに「techbookfest.org」と入力し、青いボタン（設定を確認する）を押してみましょう。すると、次のような画面が表示されます。

techbookfest.orgのSSL証明書設定が表示された

画像

SSLサーバ証明書と中間CA証明書1、2のそれぞれの赤いボタンを押せば、詳細情報を表示できます。いろいろなことが記載されていますが、要約すれば次の表に挙げたことが書かれています。

SSLサーバ証明書	techbookfest.org の運営者「EXAMPLE Corporation」の身元は「Cybertrust Japan Public CA G3」が保証する
中間CA証明書1	SSLサーバ証明書を発行した「Cybertrust Japan Public CA G3」の身元は「Baltimore CyberTrust Root」が保証する
中間CA証明書2	中間CA証明書1を発行した「Baltimore CyberTrust Root」の身元は「GTE CyberTrust Global Root」が保証する
身元保証の連鎖ですね。株式会社イグザンプルを仮にAさんとすると、Aさんの身元をBさんが、Bさんの身元をCさんが、Cさんの身元をDさんが保証しています。

SSL証明書と中間CA証明書はサーバに設置されているため、ブラウザでサイトを開くと、Webページと一緒にパソコンへ届けられます。これでAさん、Bさん、Cさんの身元は保証されましたが、ではDさんこと一番下の中間CA証明書2を発行した「GTE CyberTrust Global Root」の身元を証明する「ルート証明書」はどこにあるのでしょうか。

実は、ルート証明書は皆さんが使っているブラウザに最初から入っているのです。ChromeやFirefox、IEといった各ブラウザには、身元保証の連鎖の頂点にある「ルート証明書」が最初からインストールされています。

Chromeなら、設定(S)＞詳細設定を表示...＞HTTPS/SSLの「証明書の管理...」をクリック＞「信頼されたルート認証機関」のタブをクリックすると、そこにDさんこと「GTE CyberTrust Global Root」の身元を証明する「ルート証明書」があることを確認できます。

Chromeに入っているルート証明書のリスト

画像

ちなみにルート証明書の「発行先」と「発行者」を見ると、まったく同じ「GTE CyberTrust Global Root」です。これはDさんの身元はDさん自身が保証し、それをブラウザが信頼したので、ここに最初からルート証明書が入っているという図式です。

このようにSSL証明書と中間CA証明書がWebサーバに置いてあり、そして「ルート証明書」がブラウザに入っているため、株式会社イグザンプルのコーポレートサイトは「株式会社イグザンプルが運営する本物のサイト」として信頼してもらえるのです。

身元保証連鎖の頂点にあたるルート証明書はブラウザに入っている

画像

SSL証明書ってこんな仕組みになってたんですね。

== SSL証明書はどうしてあんなに値段に差があるの？

ではSSL証明書の仕組みが分かったところで、SSL証明書における最もありがちな疑問、「⁠どうしてSSL証明書はあんなに値段に差があるの？」についても、少しお話ししておきます。

SSL証明書で検索してみると、シマンテックは219,000円、サイバートラストは75,000円、そしてサイフにやさしいSSL証明書ことRapidSSLは2,600円でした（執筆当時⁠）⁠。この価格差は驚きますよね。

なぜこんなに価格差があるのでしょうか。シマンテックはブランド代が含まれるので高いのでしょうか？ あるいはRapidSSLが企業努力の塊なのでしょうか？ それとも同じ「SSL証明書」という名前でも、RapidSSLのSSL証明書は中身が何か違うのでしょうか？

== 同じ「SSL証明書」という名前でも3つの種類がある

結論から言うと違います。

SSL証明書の役割は次の2つであることを説明してきました。

Webサイトで送受信する情報を暗号化すること
Webサイト運営者の身元を証明すること
しかし、RapidSSLが発行しているような安いSSL証明書は、Webサイト運営者の身元証明をせず、「⁠情報の暗号化」だけしか行いません。

「え、それってSSL証明書だって言えるの？」と思うかもしれませんが、言えます。なぜなら、SSLサーバ証明書には実は3つの種類があるからです。

「SSL証明書」とひとくちに言っても、その実態は3種類に分かれています。分かりやすくいうと「高い」「⁠普通」「⁠安い」の3種類で、それぞれ「EV証明書」「⁠OV証明書」「⁠DV証明書」という名前です。

=== 3つの違いは何か？

種類	何を証明してくれる？	商品例
EV証明書（Extended Validation）	Webサイト運営者の身元をより厳格に書類と電話で確認して証明	・サイバートラストのSureServer EV
・シマンテックのセキュア・サーバ ID EV
OV証明書（Organization Validation）	Webサイト運営者の身元をメールと電話で確認して証明	・サイバートラストのSureServer
・シマンテックのセキュア・サーバ ID
DV証明書（Domain Validation）	そのドメインの使用権があることを証明	・RapidSSL
RapidSSLのようなDV証明書は、SSL証明書という名前で呼ばれていますが「Webサイト運営者の身元証明」は一切行いません。

=== DV証明書

ドメインの所有者を「Whois」と呼ばれるドメインの登録者情報で確認し、そこに書いてある所有者のメールアドレスに対して「このドメインのSSL証明書を発行していいですか？」と確認してくるだけです。ですから、ドメイン所有者が発行承認ボタンを押したら、それだけですぐに発行されます。

このようにDV証明書は、「⁠ドメインの使用権があること」の確認と証明をするだけで、「⁠誰がそのWebサイトを運営しているのか？」という身元確認及び身元証明はしてくれません。したがってDV証明書は、先ほどのEXAMPLE銀行のように「身元の証明をしたい」ケースでは使う意味がありません。HTTPSで暗号化はしたいけれど、身元証明をする必要度はあまりない、開発用のテスト環境等で使用されることが多いです。

=== EV証明書とOV証明書

DV証明書の役割は分かりました。では残りの2つ、「⁠高い＝EV証明書」と「普通＝OV証明書」の違いは何なのでしょうか。先ほど例として挙げた株式会社イグザンプルのコーポレートサイトでは、「⁠普通」のOV証明書を採用しています。

EV証明書とOV証明書は、DV証明書と違って、SSL証明書の2つの役割をきちんと果たします。

しかしOV証明書は、ブラウザの鍵マークをクリックして証明書を開き、その中の証明書情報を確認しないと、サイト運営者の名前が表示されません。分かりにくいと思いますので、実際の画面を見てみましょう。例えばFirefoxで見たとき、株式会社イグザンプルのコーポレートサイトのお問い合わせ画面は次のようになります。

驚かれるかもしれませんが、OV証明書の場合、ここにWebサイトの運営者名は表示されず、「⁠このサイトの運営者は不明です」になってしまいます。なぜならば「Webサイト運営者の身元をメールと電話で確認しただけで、確認度合いが低いため、身元証明がいまいち信用できない」とブラウザ（Firefox）が思っているからです。

鍵のマークをクリックした後に、「⁠詳細を表示...」をクリックし、さらに「証明書を表示...」をクリックすると、ここで初めて運営者名として「EXAMPLE Corporation」という名前が出てきます。EV証明書のように、「⁠Webサイト運営者の身元を書類と電話でより厳格にチェックして証明」されたものでないと、ここには運営者の名前は出ないのです。

Firefoxの証明書詳細情報確認画面

画像

これは結構重要な問題です。つまり一見しただけなら、身元を証明しないDV証明書と、身元を証明するOV証明書は区別がつかないのです。先ほどのEXAMPLE銀行の例に戻ってみましょう。EXAMPLE銀行の広報担当が身元証明をするOV証明書を取得して、詐欺師が身元を証明しないDV証明書を取得した場合、次のようになります。

OV証明書とDV証明書はぱっと見ただけでは区別がつかない

画像

もちろん、証明書の情報をよく確認してもらえれば、片方が身元証明されていないことは分かるのですが、そんなことをするエンドユーザは滅多にいません。

そこで、ぱっと見ただけで「偽物と区別がつくようにしたい」「⁠成りすましを防ぎたい」というときは、DV証明書でもOV証明書でもなく、EV証明書を使う必要があります。実際、三井住友銀行や三菱東京UFJ銀行を始めとする国内のネットバンクは、ほとんどがEV証明書を採用しています。

シマンテックのEV証明書を採用している三菱東京UFJ銀行のサイト

画像

またネットショップのように、クレジットカード情報を入力するサイトでも、EV証明書を採用するところが増えてきました。例えば「山田養蜂場」というはちみつや自然食品のオンライン販売をしているサイトでは、サイバートラストのEV証明書を使っているため、URLの左側にサイトの運営者名が日本語で出ています。また鍵マークをクリックすると、社名に加えて住所も表示されるため、どこのだれが運営しているサイトなのかがすぐに分かります。

EV証明書を採用している山田養蜂場のサイト

画像

ネットバンクやネットショップなど、偽物が出やすく、かつ偽物による被害が出た場合にダメージが大きいサイトでは、多少値段が高くてもEV証明書を使う意味があるということなのです。

このように「SSL証明書」という1つの名前でも、その中で「DV証明書」「⁠OV証明書」「⁠EV証明書」の3種類に分かれていて、値段が大きく違います。高いSSL証明書と安いSSL証明書がある理由が納得できましたか？

==== さよならグリーンバー

2019年9月にリリースされたChromeバージョン77、そして翌月10月にリリースされたFirefoxバージョン70からは、グリーンバーは表示されなくなりました。

=== ブラウザベンダーによるEV証明書の扱いの変化
== その他の証明書
=== 中間証明書
=== クロスルート証明書
== どの証明書を買えばいい？
=== ワイルドカード証明書
=== wwwありにリダイレクトしたいだけなのにwwwなしの証明書もいるの？
=== コモンネームが*.example.comの証明書はexample.comで使える？
==== SANs
=== Let'sEncrypt
== CDNと証明書
=== CDNを使ったら古い端末でサイトが見られなくなった
=== 同じサーバで複数サイトをHTTPS化したら古い端末で別サイトが表示された
=== SNI Server Name Indication

HTTPSで使われるTLSプロトコルでは、接続したいホスト名をクライアント側からサーバに伝えるためにSNI（Server Name Indication）のTLS拡張が必要となります。
ただしSNIは、1つのIPアドレスを複数のバーチャルホストで共用するため、HTTPSで使用した場合、SNI非対応のクライアントではデフォルトのホストが応答します。
2019年現在、SNI非対応端末を「対象端末」としているサービスはあまり多くないかもしれません。
